{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { CID } from 'multiformats/cid';\nimport { createEncoder, createHeader } from './encoder.js';\nimport { create as iteratorChannel } from './iterator-channel.js';\nimport { bytesReader, readHeader } from './decoder.js';\nexport class CarWriter {\n  constructor(roots, encoder) {\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n\n  async put(block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n\n    const cid = CID.asCID(block.cid);\n\n    if (!cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({\n      cid,\n      bytes: block.bytes\n    }));\n    return this._mutex;\n  }\n\n  async close() {\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n\n    await this._mutex;\n    this._ended = true;\n    return this._encoder.close();\n  }\n\n  static create(roots) {\n    roots = toRoots(roots);\n    const {\n      encoder,\n      iterator\n    } = encodeWriter();\n    const writer = new CarWriter(roots, encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n\n  static createAppender() {\n    const {\n      encoder,\n      iterator\n    } = encodeWriter();\n\n    encoder.setRoots = () => Promise.resolve();\n\n    const writer = new CarWriter([], encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n\n  static async updateRootsInBytes(bytes, roots) {\n    const reader = bytesReader(bytes);\n    await readHeader(reader);\n    const newHeader = createHeader(roots);\n\n    if (reader.pos !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`);\n    }\n\n    bytes.set(newHeader, 0);\n    return bytes;\n  }\n\n}\nexport class CarWriterOut {\n  constructor(iterator) {\n    this._iterator = iterator;\n  }\n\n  [Symbol.asyncIterator]() {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported');\n    }\n\n    this._iterating = true;\n    return this._iterator;\n  }\n\n}\n\nfunction encodeWriter() {\n  const iw = iteratorChannel();\n  const {\n    writer,\n    iterator\n  } = iw;\n  const encoder = createEncoder(writer);\n  return {\n    encoder,\n    iterator\n  };\n}\n\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n\n  if (!Array.isArray(roots)) {\n    const cid = CID.asCID(roots);\n\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n\n    return [cid];\n  }\n\n  const _roots = [];\n\n  for (const root of roots) {\n    const _root = CID.asCID(root);\n\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n\n    _roots.push(_root);\n  }\n\n  return _roots;\n}\n\nexport const __browser = true;","map":{"version":3,"names":["CID","createEncoder","createHeader","create","iteratorChannel","bytesReader","readHeader","CarWriter","constructor","roots","encoder","_encoder","_mutex","setRoots","_ended","put","block","bytes","Uint8Array","cid","TypeError","Error","asCID","then","writeBlock","close","toRoots","iterator","encodeWriter","writer","out","CarWriterOut","createAppender","Promise","resolve","updateRootsInBytes","reader","newHeader","pos","length","set","_iterator","Symbol","asyncIterator","_iterating","iw","undefined","Array","isArray","_roots","root","_root","push","__browser"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/@ipld/car/esm/lib/writer-browser.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport {\n  createEncoder,\n  createHeader\n} from './encoder.js';\nimport { create as iteratorChannel } from './iterator-channel.js';\nimport {\n  bytesReader,\n  readHeader\n} from './decoder.js';\nexport class CarWriter {\n  constructor(roots, encoder) {\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n  async put(block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    const cid = CID.asCID(block.cid);\n    if (!cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({\n      cid,\n      bytes: block.bytes\n    }));\n    return this._mutex;\n  }\n  async close() {\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    await this._mutex;\n    this._ended = true;\n    return this._encoder.close();\n  }\n  static create(roots) {\n    roots = toRoots(roots);\n    const {encoder, iterator} = encodeWriter();\n    const writer = new CarWriter(roots, encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static createAppender() {\n    const {encoder, iterator} = encodeWriter();\n    encoder.setRoots = () => Promise.resolve();\n    const writer = new CarWriter([], encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static async updateRootsInBytes(bytes, roots) {\n    const reader = bytesReader(bytes);\n    await readHeader(reader);\n    const newHeader = createHeader(roots);\n    if (reader.pos !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${ reader.pos } bytes, new header is ${ newHeader.length } bytes)`);\n    }\n    bytes.set(newHeader, 0);\n    return bytes;\n  }\n}\nexport class CarWriterOut {\n  constructor(iterator) {\n    this._iterator = iterator;\n  }\n  [Symbol.asyncIterator]() {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported');\n    }\n    this._iterating = true;\n    return this._iterator;\n  }\n}\nfunction encodeWriter() {\n  const iw = iteratorChannel();\n  const {writer, iterator} = iw;\n  const encoder = createEncoder(writer);\n  return {\n    encoder,\n    iterator\n  };\n}\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n  if (!Array.isArray(roots)) {\n    const cid = CID.asCID(roots);\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    return [cid];\n  }\n  const _roots = [];\n  for (const root of roots) {\n    const _root = CID.asCID(root);\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    _roots.push(_root);\n  }\n  return _roots;\n}\nexport const __browser = true;"],"mappings":"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"},"metadata":{},"sourceType":"module"}