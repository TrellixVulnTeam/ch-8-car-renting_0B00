{"ast":null,"code":"import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n\n  let treeBuilder;\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n\n  let candidates;\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}","map":{"version":3,"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","source","blockstore","options","opts","dagBuilder","treeBuilder","candidates","Symbol","asyncIterator","iterator","entry","fileImportConcurrency","cid","path","unixfs","size"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/ipfs-unixfs-importer/esm/src/index.js"],"sourcesContent":["import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,mBAA1B;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAO,gBAAgBC,QAAhB,CAAyBC,MAAzB,EAAiCC,UAAjC,EAA6CC,OAAO,GAAG,EAAvD,EAA2D;EAChE,MAAMC,IAAI,GAAGP,cAAc,CAACM,OAAD,CAA3B;EACA,IAAIE,UAAJ;;EACA,IAAI,OAAOF,OAAO,CAACE,UAAf,KAA8B,UAAlC,EAA8C;IAC5CA,UAAU,GAAGF,OAAO,CAACE,UAArB;EACD,CAFD,MAEO;IACLA,UAAU,GAAGP,YAAb;EACD;;EACD,IAAIQ,WAAJ;;EACA,IAAI,OAAOH,OAAO,CAACG,WAAf,KAA+B,UAAnC,EAA+C;IAC7CA,WAAW,GAAGH,OAAO,CAACG,WAAtB;EACD,CAFD,MAEO;IACLA,WAAW,GAAGP,aAAd;EACD;;EACD,IAAIQ,UAAJ;;EACA,IAAIC,MAAM,CAACC,aAAP,IAAwBR,MAAxB,IAAkCO,MAAM,CAACE,QAAP,IAAmBT,MAAzD,EAAiE;IAC/DM,UAAU,GAAGN,MAAb;EACD,CAFD,MAEO;IACLM,UAAU,GAAG,CAACN,MAAD,CAAb;EACD;;EACD,WAAW,MAAMU,KAAjB,IAA0BL,WAAW,CAACV,aAAa,CAACS,UAAU,CAACE,UAAD,EAAaL,UAAb,EAAyBE,IAAzB,CAAX,EAA2CA,IAAI,CAACQ,qBAAhD,CAAd,EAAsFV,UAAtF,EAAkGE,IAAlG,CAArC,EAA8I;IAC5I,MAAM;MACJS,GAAG,EAAEF,KAAK,CAACE,GADP;MAEJC,IAAI,EAAEH,KAAK,CAACG,IAFR;MAGJC,MAAM,EAAEJ,KAAK,CAACI,MAHV;MAIJC,IAAI,EAAEL,KAAK,CAACK;IAJR,CAAN;EAMD;AACF"},"metadata":{},"sourceType":"module"}