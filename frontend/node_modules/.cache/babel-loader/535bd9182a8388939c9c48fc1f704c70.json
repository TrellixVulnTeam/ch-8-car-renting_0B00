{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { __awaiter } from \"tslib\";\nimport { WalletConnection, connect, keyStores, utils } from \"near-api-js\";\nimport * as nearApi from \"near-api-js\";\nimport { transformActions } from \"@near-wallet-selector/core\";\nexport function setupNearWallet({\n  walletUrl,\n  iconUrl\n} = {}) {\n  return function NearWallet({\n    options,\n    network,\n    emitter,\n    logger,\n    storage,\n    updateState\n  }) {\n    let keyStore;\n    let wallet;\n\n    const getAccounts = () => {\n      const accountId = wallet.getAccountId();\n\n      if (!accountId) {\n        return [];\n      }\n\n      return [{\n        accountId\n      }];\n    };\n\n    const getWalletUrl = () => {\n      if (walletUrl) {\n        return walletUrl;\n      }\n\n      switch (network.networkId) {\n        case \"mainnet\":\n          return \"https://wallet.near.org\";\n\n        case \"testnet\":\n          return \"https://wallet.testnet.near.org\";\n\n        case \"betanet\":\n          return \"https://wallet.betanet.near.org\";\n\n        default:\n          throw new Error(\"Invalid wallet URL\");\n      }\n    };\n\n    const transformTransactions = transactions => __awaiter(this, void 0, void 0, function* () {\n      const account = wallet.account();\n      const {\n        networkId,\n        signer,\n        provider\n      } = account.connection;\n      const localKey = yield signer.getPublicKey(account.accountId, networkId);\n      return Promise.all(transactions.map((transaction, index) => __awaiter(this, void 0, void 0, function* () {\n        const actions = transformActions(transaction.actions);\n        const accessKey = yield account.accessKeyForTransaction(transaction.receiverId, actions, localKey);\n\n        if (!accessKey) {\n          throw new Error(`Failed to find matching key for transaction sent to ${transaction.receiverId}`);\n        }\n\n        const block = yield provider.block({\n          finality: \"final\"\n        });\n        return nearApi.transactions.createTransaction(account.accountId, utils.PublicKey.from(accessKey.public_key), transaction.receiverId, accessKey.access_key.nonce + index + 1, actions, utils.serialize.base_decode(block.header.hash));\n      })));\n    });\n\n    return {\n      id: \"near-wallet\",\n      type: \"browser\",\n      name: \"NEAR Wallet\",\n      description: null,\n      iconUrl: iconUrl || \"./assets/near-wallet-icon.png\",\n\n      isAvailable() {\n        return true;\n      },\n\n      init() {\n        return __awaiter(this, void 0, void 0, function* () {\n          const localStorageKeyStore = new keyStores.BrowserLocalStorageKeyStore();\n          const near = yield connect(Object.assign(Object.assign({\n            keyStore: localStorageKeyStore,\n            walletUrl: getWalletUrl()\n          }, network), {\n            headers: {}\n          }));\n          wallet = new WalletConnection(near, \"near_app\");\n          keyStore = localStorageKeyStore; // Cleanup up any pending keys (cancelled logins).\n\n          if (!wallet.isSignedIn()) {\n            yield localStorageKeyStore.clear();\n          }\n        });\n      },\n\n      // We don't emit \"signIn\" or update state as we can't guarantee the user will\n      // actually sign in. Best we can do is temporarily set it as selected and\n      // validate on initialise.\n      signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (!wallet) {\n            yield this.init();\n          }\n\n          yield wallet.requestSignIn({\n            contractId: options.contractId,\n            methodNames: options.methodNames\n          }); // TODO: Find better way to do this without exposing 'LOCAL_STORAGE_SELECTED_WALLET_ID' in core.\n\n          storage.setItem(\"selectedWalletId\", this.id);\n        });\n      },\n\n      signOut() {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (!wallet) {\n            return;\n          }\n\n          wallet.signOut();\n          yield keyStore.clear();\n          updateState(prevState => Object.assign(Object.assign({}, prevState), {\n            selectedWalletId: null\n          }));\n          const accounts = getAccounts();\n          emitter.emit(\"accountsChanged\", {\n            accounts\n          });\n          emitter.emit(\"signOut\", {\n            accounts\n          });\n        });\n      },\n\n      isSignedIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (!wallet) {\n            return false;\n          }\n\n          return wallet.isSignedIn();\n        });\n      },\n\n      getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n          return getAccounts();\n        });\n      },\n\n      signAndSendTransaction({\n        signerId,\n        receiverId,\n        actions\n      }) {\n        return __awaiter(this, void 0, void 0, function* () {\n          logger.log(\"NearWallet:signAndSendTransaction\", {\n            signerId,\n            receiverId,\n            actions\n          });\n          const account = wallet.account();\n          return account[\"signAndSendTransaction\"]({\n            receiverId,\n            actions: transformActions(actions)\n          }).then(() => {// Suppress response since transactions with deposits won't actually\n            // return FinalExecutionOutcome.\n          });\n        });\n      },\n\n      signAndSendTransactions({\n        transactions\n      }) {\n        return __awaiter(this, void 0, void 0, function* () {\n          logger.log(\"NearWallet:signAndSendTransactions\", {\n            transactions\n          });\n          return wallet.requestSignTransactions({\n            transactions: yield transformTransactions(transactions)\n          });\n        });\n      }\n\n    };\n  };\n}","map":{"version":3,"mappings":"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","names":["WalletConnection","connect","keyStores","utils","nearApi","transformActions","setupNearWallet","walletUrl","iconUrl","NearWallet","options","network","emitter","logger","storage","updateState","keyStore","wallet","getAccounts","accountId","getAccountId","getWalletUrl","networkId","Error","transformTransactions","transactions","__awaiter","account","signer","provider","connection","localKey","getPublicKey","Promise","all","map","transaction","index","actions","accessKey","accessKeyForTransaction","receiverId","block","finality","createTransaction","PublicKey","from","public_key","access_key","nonce","serialize","base_decode","header","hash","id","type","name","description","isAvailable","init","localStorageKeyStore","BrowserLocalStorageKeyStore","near","headers","isSignedIn","clear","signIn","requestSignIn","contractId","methodNames","setItem","signOut","prevState","Object","selectedWalletId","accounts","emit","signAndSendTransaction","signerId","log","then","signAndSendTransactions","requestSignTransactions"],"sourceRoot":"","sources":["../../../../../packages/near-wallet/src/lib/near-wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}