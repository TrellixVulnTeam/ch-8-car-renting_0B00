{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nimport { createHAMT, Bucket } from 'hamt-sharding';\n\nclass DirSharded extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n  }\n\n  async put(name, value) {\n    await this._bucket.put(name, value);\n  }\n\n  get(name) {\n    return this._bucket.get(name);\n  }\n\n  childCount() {\n    return this._bucket.leafCount();\n  }\n\n  directChildrenCount() {\n    return this._bucket.childrenCount();\n  }\n\n  onlyChild() {\n    return this._bucket.onlyChild();\n  }\n\n  async *eachChildSeries() {\n    for await (const {\n      key,\n      value\n    } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      };\n    }\n  }\n\n  async *flush(blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield { ...entry,\n        path: this.path\n      };\n    }\n  }\n\n}\n\nexport default DirSharded;\n\nasync function* flush(bucket, blockstore, shardRoot, options) {\n  const children = bucket._children;\n  const links = [];\n  let childrenSize = 0;\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i);\n\n    if (!child) {\n      continue;\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n    if (child instanceof Bucket) {\n      let shard;\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard;\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found');\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      });\n      childrenSize += shard.size;\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value;\n      let flushedDir;\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry;\n        yield flushedDir;\n      }\n\n      const label = labelPrefix + child.key;\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      });\n      childrenSize += flushedDir.size;\n    } else {\n      const value = child.value;\n\n      if (!value.cid) {\n        continue;\n      }\n\n      const label = labelPrefix + child.key;\n      const size = value.size;\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      });\n      childrenSize += size;\n    }\n  }\n\n  const data = Uint8Array.from(children.bitField().reverse());\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  });\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  };\n  const buffer = encode(prepare(node));\n  const cid = await persist(buffer, blockstore, options);\n  const size = buffer.length + childrenSize;\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  };\n}","map":{"version":3,"names":["encode","prepare","UnixFS","Dir","persist","createHAMT","Bucket","DirSharded","constructor","props","options","_bucket","hashFn","hamtHashFn","bits","hamtBucketBits","put","name","value","get","childCount","leafCount","directChildrenCount","childrenCount","onlyChild","eachChildSeries","key","eachLeafSeries","child","flush","blockstore","entry","path","bucket","shardRoot","children","_children","links","childrenSize","i","length","labelPrefix","toString","toUpperCase","padStart","shard","subShard","Error","push","Name","Tsize","size","Hash","cid","dir","flushedDir","label","data","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","hamtHashCode","mtime","mode","node","Data","marshal","Links","buffer","unixfs"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/ipfs-unixfs-importer/esm/src/dir-sharded.js"],"sourcesContent":["import {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\nimport {\n  createHAMT,\n  Bucket\n} from 'hamt-sharding';\nclass DirSharded extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n  }\n  async put(name, value) {\n    await this._bucket.put(name, value);\n  }\n  get(name) {\n    return this._bucket.get(name);\n  }\n  childCount() {\n    return this._bucket.leafCount();\n  }\n  directChildrenCount() {\n    return this._bucket.childrenCount();\n  }\n  onlyChild() {\n    return this._bucket.onlyChild();\n  }\n  async *eachChildSeries() {\n    for await (const {key, value} of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      };\n    }\n  }\n  async *flush(blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      };\n    }\n  }\n}\nexport default DirSharded;\nasync function* flush(bucket, blockstore, shardRoot, options) {\n  const children = bucket._children;\n  const links = [];\n  let childrenSize = 0;\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i);\n    if (!child) {\n      continue;\n    }\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n    if (child instanceof Bucket) {\n      let shard;\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard;\n      }\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found');\n      }\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      });\n      childrenSize += shard.size;\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value;\n      let flushedDir;\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry;\n        yield flushedDir;\n      }\n      const label = labelPrefix + child.key;\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      });\n      childrenSize += flushedDir.size;\n    } else {\n      const value = child.value;\n      if (!value.cid) {\n        continue;\n      }\n      const label = labelPrefix + child.key;\n      const size = value.size;\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      });\n      childrenSize += size;\n    }\n  }\n  const data = Uint8Array.from(children.bitField().reverse());\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  });\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  };\n  const buffer = encode(prepare(node));\n  const cid = await persist(buffer, blockstore, options);\n  const size = buffer.length + childrenSize;\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}