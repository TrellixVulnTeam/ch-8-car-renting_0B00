export interface Subscription {
    remove: () => void;
}
export interface Emitter<Events extends Record<string, unknown>> {
    on<EventName extends keyof Events>(eventName: EventName, callback: (event: Events[EventName]) => void): Subscription;
    off<EventName extends keyof Events>(eventName: EventName, callback: (event: Events[EventName]) => void): void;
    emit<EventName extends keyof Events>(eventName: EventName, event: Events[EventName]): void;
}
export declare class EventEmitter<Events extends Record<string, unknown>> implements Emitter<Events> {
    private emitter;
    on<Event extends keyof Events>(eventName: Event, callback: (event: Events[Event]) => void): Subscription;
    off<Event extends keyof Events>(eventName: Event, callback: (event: Events[Event]) => void): void;
    emit<Event extends keyof Events>(eventName: Event, event: Events[Event]): void;
}
