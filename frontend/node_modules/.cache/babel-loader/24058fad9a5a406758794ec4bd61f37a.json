{"ast":null,"code":"import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\n\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\n\nexport default bufferImporter;","map":{"version":3,"names":["UnixFS","persist","dagPb","raw","bufferImporter","file","block","options","buffer","content","progress","length","path","unixfs","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","type","leafType","data","encode","Data","marshal","Links","cid","size"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/buffer-importer.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\nexport default bufferImporter;"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;;AACA,gBAAgBC,cAAhB,CAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,OAA5C,EAAqD;EACnD,WAAW,IAAIC,MAAf,IAAyBH,IAAI,CAACI,OAA9B,EAAuC;IACrC,MAAM,YAAY;MAChBF,OAAO,CAACG,QAAR,CAAiBF,MAAM,CAACG,MAAxB,EAAgCN,IAAI,CAACO,IAArC;MACA,IAAIC,MAAJ;MACA,MAAMC,IAAI,GAAG;QACXC,KAAK,EAAEb,KADI;QAEXc,UAAU,EAAET,OAAO,CAACS,UAFT;QAGXC,MAAM,EAAEV,OAAO,CAACU,MAHL;QAIXC,QAAQ,EAAEX,OAAO,CAACW;MAJP,CAAb;;MAMA,IAAIX,OAAO,CAACY,SAAZ,EAAuB;QACrBL,IAAI,CAACC,KAAL,GAAaZ,GAAb;QACAW,IAAI,CAACE,UAAL,GAAkB,CAAlB;MACD,CAHD,MAGO;QACLH,MAAM,GAAG,IAAIb,MAAJ,CAAW;UAClBoB,IAAI,EAAEb,OAAO,CAACc,QADI;UAElBC,IAAI,EAAEd;QAFY,CAAX,CAAT;QAIAA,MAAM,GAAGN,KAAK,CAACqB,MAAN,CAAa;UACpBC,IAAI,EAAEX,MAAM,CAACY,OAAP,EADc;UAEpBC,KAAK,EAAE;QAFa,CAAb,CAAT;MAID;;MACD,OAAO;QACLC,GAAG,EAAE,MAAM1B,OAAO,CAACO,MAAD,EAASF,KAAT,EAAgBQ,IAAhB,CADb;QAELD,MAFK;QAGLe,IAAI,EAAEpB,MAAM,CAACG;MAHR,CAAP;IAKD,CA3BD;EA4BD;AACF;;AACD,eAAeP,cAAf"},"metadata":{},"sourceType":"module"}