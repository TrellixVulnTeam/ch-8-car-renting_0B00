import { SignInParams } from "./WalletController";
import { Action, Transaction, WalletEvents } from "./wallet";
import { Options } from "./Options";
import { NetworkConfiguration } from "./network";
import { Optional } from "./Optional";
interface SignAndSendTransactionParams {
    signerId?: string;
    receiverId?: string;
    actions: Array<Action>;
}
interface SignAndSendTransactionsParams {
    transactions: Array<Optional<Transaction, "signerId">>;
}
export default class NearWalletSelector {
    private options;
    private emitter;
    private controller;
    network: NetworkConfiguration;
    static init(options: Options): Promise<NearWalletSelector>;
    private constructor();
    private renderModal;
    show(): void;
    hide(): void;
    signIn(params: SignInParams): Promise<void>;
    signOut(): Promise<void>;
    isSignedIn(): false | Promise<boolean>;
    getAccounts(): Promise<import("./wallet").AccountInfo[]>;
    on<EventName extends keyof WalletEvents>(eventName: EventName, callback: (event: WalletEvents[EventName]) => void): import("./services").Subscription;
    off<EventName extends keyof WalletEvents>(eventName: EventName, callback: (event: WalletEvents[EventName]) => void): void;
    getContractId(): string;
    signAndSendTransaction({ signerId, receiverId, actions, }: SignAndSendTransactionParams): Promise<void | import("near-api-js/lib/providers").FinalExecutionOutcome>;
    signAndSendTransactions({ transactions, }: SignAndSendTransactionsParams): Promise<void | import("near-api-js/lib/providers").FinalExecutionOutcome[]>;
}
export {};
