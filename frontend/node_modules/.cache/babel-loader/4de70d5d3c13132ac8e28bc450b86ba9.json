{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport { CarReader, CarWriter } from '@ipld/car';\nimport { Block } from 'multiformats/block';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as cbor from '@ipld/dag-cbor';\nimport * as pb from '@ipld/dag-pb';\nexport class TreewalkCarSplitter {\n  constructor(reader, targetSize, options = {}) {\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [pb, raw, cbor, ...(options.decoders || [])];\n  }\n\n  async *cars() {\n    const roots = await this._reader.getRoots();\n    if (roots.length !== 1) throw new Error(`unexpected number of roots: ${roots.length}`);\n    let channel;\n\n    for await (const val of this._cars(roots[0])) {\n      channel = val.channel;\n      if (val.out) yield val.out;\n    }\n\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n\n    channel.writer.close();\n    yield channel.out;\n  }\n\n  async _get(cid) {\n    const rawBlock = await this._reader.get(cid);\n    if (!rawBlock) throw new Error(`missing block for ${cid}`);\n    const {\n      bytes\n    } = rawBlock;\n\n    const decoder = this._decoders.find(d => d.code === cid.code);\n\n    if (!decoder) throw new Error(`missing decoder for ${cid.code}`);\n    return new Block({\n      cid,\n      bytes,\n      value: decoder.decode(bytes)\n    });\n  }\n\n  async *_cars(cid, parents = [], channel = undefined) {\n    const block = await this._get(cid);\n    channel = channel || Object.assign(CarWriter.create(cid), {\n      size: 0\n    });\n\n    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {\n      channel.writer.close();\n      const {\n        out\n      } = channel;\n      channel = newCar(parents);\n      yield {\n        channel,\n        out\n      };\n    }\n\n    parents = parents.concat(block);\n    channel.size += block.bytes.byteLength;\n    channel.writer.put(block);\n\n    for (const [, cid] of block.links()) {\n      for await (const val of this._cars(cid, parents, channel)) {\n        channel = val.channel;\n        yield val;\n      }\n    }\n\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n\n    yield {\n      channel\n    };\n  }\n\n  static async fromIterable(iterable, targetSize, options) {\n    const reader = await CarReader.fromIterable(iterable);\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n\n  static async fromBlob(blob, targetSize, options) {\n    const buffer = await blob.arrayBuffer();\n    const reader = await CarReader.fromBytes(new Uint8Array(buffer));\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n\n}\n\nfunction newCar(parents) {\n  const ch = Object.assign(CarWriter.create(parents[0].cid), {\n    size: parents.reduce((size, b) => size + b.bytes.byteLength, 0)\n  });\n\n  for (const b of parents) {\n    ch.writer.put(b);\n  }\n\n  return ch;\n}","map":{"version":3,"names":["CarReader","CarWriter","Block","raw","cbor","pb","TreewalkCarSplitter","constructor","reader","targetSize","options","Error","_reader","_targetSize","_decoders","decoders","cars","roots","getRoots","length","channel","val","_cars","out","writer","close","_get","cid","rawBlock","get","bytes","decoder","find","d","code","value","decode","parents","undefined","block","Object","assign","create","size","byteLength","newCar","concat","put","links","fromIterable","iterable","fromBlob","blob","buffer","arrayBuffer","fromBytes","Uint8Array","ch","reduce","b"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/carbites/esm/lib/treewalk/splitter.js"],"sourcesContent":["import {\n  CarReader,\n  CarWriter\n} from '@ipld/car';\nimport { Block } from 'multiformats/block';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as cbor from '@ipld/dag-cbor';\nimport * as pb from '@ipld/dag-pb';\nexport class TreewalkCarSplitter {\n  constructor(reader, targetSize, options = {}) {\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [\n      pb,\n      raw,\n      cbor,\n      ...options.decoders || []\n    ];\n  }\n  async *cars() {\n    const roots = await this._reader.getRoots();\n    if (roots.length !== 1)\n      throw new Error(`unexpected number of roots: ${ roots.length }`);\n    let channel;\n    for await (const val of this._cars(roots[0])) {\n      channel = val.channel;\n      if (val.out)\n        yield val.out;\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    channel.writer.close();\n    yield channel.out;\n  }\n  async _get(cid) {\n    const rawBlock = await this._reader.get(cid);\n    if (!rawBlock)\n      throw new Error(`missing block for ${ cid }`);\n    const {bytes} = rawBlock;\n    const decoder = this._decoders.find(d => d.code === cid.code);\n    if (!decoder)\n      throw new Error(`missing decoder for ${ cid.code }`);\n    return new Block({\n      cid,\n      bytes,\n      value: decoder.decode(bytes)\n    });\n  }\n  async *_cars(cid, parents = [], channel = undefined) {\n    const block = await this._get(cid);\n    channel = channel || Object.assign(CarWriter.create(cid), { size: 0 });\n    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {\n      channel.writer.close();\n      const {out} = channel;\n      channel = newCar(parents);\n      yield {\n        channel,\n        out\n      };\n    }\n    parents = parents.concat(block);\n    channel.size += block.bytes.byteLength;\n    channel.writer.put(block);\n    for (const [, cid] of block.links()) {\n      for await (const val of this._cars(cid, parents, channel)) {\n        channel = val.channel;\n        yield val;\n      }\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    yield { channel };\n  }\n  static async fromIterable(iterable, targetSize, options) {\n    const reader = await CarReader.fromIterable(iterable);\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n  static async fromBlob(blob, targetSize, options) {\n    const buffer = await blob.arrayBuffer();\n    const reader = await CarReader.fromBytes(new Uint8Array(buffer));\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n}\nfunction newCar(parents) {\n  const ch = Object.assign(CarWriter.create(parents[0].cid), { size: parents.reduce((size, b) => size + b.bytes.byteLength, 0) });\n  for (const b of parents) {\n    ch.writer.put(b);\n  }\n  return ch;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}