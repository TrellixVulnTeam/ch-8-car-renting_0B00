import { Options } from "./Options";
import { Emitter } from "./services";
import { Wallet, WalletEvents } from "./wallet";
import { NetworkConfiguration } from "./network";
export interface SignInParams {
    walletId: Wallet["id"];
    accountId?: string;
    derivationPath?: string;
}
declare class WalletController {
    private options;
    private network;
    private provider;
    private emitter;
    private wallets;
    constructor(options: Options, network: NetworkConfiguration, emitter: Emitter<WalletEvents>);
    private decorateWallets;
    private setupWalletModules;
    init(): Promise<void>;
    getSelectedWallet(): Wallet | null;
    private getWallet;
    getWallets(): Wallet[];
    signIn({ walletId, accountId, derivationPath }: SignInParams): Promise<void>;
    signOut(): Promise<void>;
    isSignedIn(): false | Promise<boolean>;
    getAccounts(): Promise<import("./wallet").AccountInfo[]>;
}
export default WalletController;
