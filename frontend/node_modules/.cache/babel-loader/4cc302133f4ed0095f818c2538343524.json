{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables';\nimport pRetry, { AbortError } from 'p-retry';\nimport { TreewalkCarSplitter } from 'carbites/treewalk';\nimport { pack } from 'ipfs-car/pack';\nimport { CID } from 'multiformats/cid';\nimport throttledQueue from 'throttled-queue';\nimport * as Token from './token.js';\nimport { fetch, File, Blob, FormData, Blockstore } from './platform.js';\nimport { toGatewayURL } from './gateway.js';\nimport { BlockstoreCarReader } from './bs-car-reader.js';\nconst MAX_STORE_RETRIES = 5;\nconst MAX_CONCURRENT_UPLOADS = 3;\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10; // chunk to ~10MB CARs\n\nconst RATE_LIMIT_REQUESTS = 30;\nconst RATE_LIMIT_PERIOD = 10 * 1000;\n/**\n * @typedef {import('./lib/interface.js').Service} Service\n * @typedef {import('./lib/interface.js').CIDString} CIDString\n * @typedef {import('./lib/interface.js').Deal} Deal\n * @typedef {import('./lib/interface.js').Pin} Pin\n * @typedef {import('./lib/interface.js').CarReader} CarReader\n * @typedef {import('ipfs-car/blockstore').Blockstore} BlockstoreI\n * @typedef {import('./lib/interface.js').RateLimiter} RateLimiter\n */\n\n/**\n * @returns {RateLimiter}\n */\n\nexport function createRateLimiter() {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD);\n  return () => throttle(() => {});\n}\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the NFTStorage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\n\nconst globalRateLimiter = createRateLimiter();\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @typedef {import('./lib/interface.js').Token<T>} TokenType\n */\n\n/**\n * @implements Service\n */\n\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?: URL, rateLimiter?: RateLimiter}} options\n   */\n  constructor({\n    token,\n    endpoint = new URL('https://api.nft.storage'),\n    rateLimiter\n  }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token;\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n\n    this.endpoint = endpoint;\n    /**\n     * @readonly\n     */\n\n    this.rateLimiter = rateLimiter || createRateLimiter();\n  }\n  /**\n   * @hidden\n   * @param {string} token\n   */\n\n\n  static auth(token) {\n    if (!token) throw new Error('missing token');\n    return {\n      Authorization: `Bearer ${token}`,\n      'X-Client': 'nft.storage/js'\n    };\n  }\n  /**\n   * Stores a single file and returns its CID.\n   *\n   * @param {Service} service\n   * @param {Blob} blob\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeBlob(service, blob) {\n    const blockstore = new Blockstore();\n    let cidString;\n\n    try {\n      const {\n        cid,\n        car\n      } = await NFTStorage.encodeBlob(blob, {\n        blockstore\n      });\n      await NFTStorage.storeCar(service, car);\n      cidString = cid.toString();\n    } finally {\n      await blockstore.close();\n    }\n\n    return cidString;\n  }\n  /**\n   * Stores a CAR file and returns its root CID.\n   *\n   * @param {Service} service\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeCar({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter\n  }, car, {\n    onStoredChunk,\n    maxRetries,\n    decoders\n  } = {}) {\n    const url = new URL('upload/', endpoint);\n    const headers = NFTStorage.auth(token);\n    const targetSize = MAX_CHUNK_SIZE;\n    const splitter = car instanceof Blob ? await TreewalkCarSplitter.fromBlob(car, targetSize, {\n      decoders\n    }) : new TreewalkCarSplitter(car, targetSize, {\n      decoders\n    });\n    const upload = transform(MAX_CONCURRENT_UPLOADS, async function (\n    /** @type {AsyncIterable<Uint8Array>} */\n    car) {\n      const carParts = [];\n\n      for await (const part of car) {\n        carParts.push(part);\n      }\n\n      const carFile = new Blob(carParts, {\n        type: 'application/car'\n      });\n      const cid = await pRetry(async () => {\n        await rateLimiter();\n        const response = await fetch(url.toString(), {\n          method: 'POST',\n          headers,\n          body: carFile\n        });\n        /* c8 ignore next 3 */\n\n        if (response.status === 429) {\n          throw new Error('rate limited');\n        }\n\n        const result = await response.json();\n\n        if (!result.ok) {\n          // do not retry if unauthorized - will not succeed\n          if (response.status === 401) {\n            throw new AbortError(result.error.message);\n          }\n\n          throw new Error(result.error.message);\n        }\n\n        return result.value.cid;\n      }, {\n        retries: maxRetries == null ? MAX_STORE_RETRIES : maxRetries\n      });\n      onStoredChunk && onStoredChunk(carFile.size);\n      return cid;\n    });\n    let root;\n\n    for await (const cid of upload(splitter.cars())) {\n      root = cid;\n    }\n\n    return (\n      /** @type {CIDString} */\n      root\n    );\n  }\n  /**\n   * Stores a directory of files and returns a CID. Provided files **MUST**\n   * be within the same directory, otherwise error is raised e.g. `foo/bar.png`,\n   * `foo/bla/baz.json` is ok but `foo/bar.png`, `bla/baz.json` is not.\n   *\n   * @param {Service} service\n   * @param {Iterable<File>} files\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeDirectory(service, files) {\n    const blockstore = new Blockstore();\n    let cidString;\n\n    try {\n      const {\n        cid,\n        car\n      } = await NFTStorage.encodeDirectory(files, {\n        blockstore\n      });\n      await NFTStorage.storeCar(service, car);\n      cidString = cid.toString();\n    } finally {\n      await blockstore.close();\n    }\n\n    return cidString;\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155. The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {Service} service\n   * @param {T} metadata\n   * @returns {Promise<TokenType<T>>}\n   */\n\n\n  static async store(service, metadata) {\n    const {\n      token,\n      car\n    } = await NFTStorage.encodeNFT(metadata);\n    await NFTStorage.storeCar(service, car);\n    return token;\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @returns {Promise<import('./lib/interface.js').StatusResult>}\n   */\n\n\n  static async status({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter\n  }, cid) {\n    const url = new URL(`${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token)\n    });\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created)\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Check if a CID of an NFT is being stored by NFT.Storage.\n   *\n   * @param {import('./lib/interface.js').PublicService} service\n   * @param {string} cid\n   * @returns {Promise<import('./lib/interface.js').CheckResult>}\n   */\n\n\n  static async check({\n    endpoint,\n    rateLimiter = globalRateLimiter\n  }, cid) {\n    const url = new URL(`check/${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString());\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Removes stored content by its CID from this account. Please note that\n   * even if content is removed from the service other nodes that have\n   * replicated it might still continue providing it.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @returns {Promise<void>}\n   */\n\n\n  static async delete({\n    endpoint,\n    token,\n    rateLimiter = globalRateLimiter\n  }, cid) {\n    const url = new URL(`${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token)\n    });\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (!result.ok) {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Encodes the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155 to a\n   * CAR file. The `token.image` must be either a `File` or a `Blob` instance,\n   * which will be stored and the corresponding content address URL will be\n   * saved in the metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const { token, car } = await NFTStorage.encodeNFT({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', token.url)\n   * console.log('metadata.json contents:\\n', token.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', token.embed())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} input\n   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: CarReader }>}\n   */\n\n\n  static async encodeNFT(input) {\n    validateERC1155(input);\n    return Token.Token.encode(input);\n  }\n  /**\n   * Encodes a single file to a CAR file and also returns its root CID.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const { cid, car } = await NFTStorage.encodeBlob(content)\n   *\n   * // Root CID of the file\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n\n\n  static async encodeBlob(blob, {\n    blockstore\n  } = {}) {\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content');\n    }\n\n    return packCar([toImportCandidate('blob', blob)], {\n      blockstore,\n      wrapWithDirectory: false\n    });\n  }\n  /**\n   * Encodes a directory of files to a CAR file and also returns the root CID.\n   * Provided files **MUST** be within the same directory, otherwise error is\n   * raised e.g. `foo/bar.png`, `foo/bla/baz.json` is ok but `foo/bar.png`,\n   * `bla/baz.json` is not.\n   *\n   * @example\n   * ```js\n   * const { cid, car } = await NFTStorage.encodeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   *\n   * // Root CID of the directory\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Iterable<File>} files\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n\n\n  static async encodeDirectory(files, {\n    blockstore\n  } = {}) {\n    const input = [];\n    let size = 0;\n\n    for (const file of files) {\n      input.push(toImportCandidate(file.name, file));\n      size += file.size;\n    }\n\n    if (size === 0) {\n      throw new Error('Total size of files should exceed 0, make sure to provide some content');\n    }\n\n    return packCar(input, {\n      blockstore,\n      wrapWithDirectory: true\n    });\n  } // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   */\n\n\n  storeBlob(blob) {\n    return NFTStorage.storeBlob(this, blob);\n  }\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   */\n\n\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options);\n  }\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {Iterable<File>} files\n   */\n\n\n  storeDirectory(files) {\n    return NFTStorage.storeDirectory(this, files);\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  status(cid) {\n    return NFTStorage.status(this, cid);\n  }\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  delete(cid) {\n    return NFTStorage.delete(this, cid);\n  }\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n\n\n  check(cid) {\n    return NFTStorage.check(this, cid);\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} token\n   */\n\n\n  store(token) {\n    return NFTStorage.store(this, token);\n  }\n\n}\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @param {T} metadata\n */\n\n\nconst validateERC1155 = ({\n  name,\n  description,\n  image,\n  decimals\n}) => {\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError('string property `name` identifying the asset is required');\n  }\n\n  if (typeof description !== 'string') {\n    throw new TypeError('string property `description` describing asset is required');\n  }\n\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object');\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`);\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value');\n  }\n};\n/**\n * @param {Array<{ path: string, content: import('./platform.js').ReadableStream }>} input\n * @param {object} [options]\n * @param {BlockstoreI} [options.blockstore]\n * @param {boolean} [options.wrapWithDirectory]\n */\n\n\nconst packCar = async (input, {\n  blockstore,\n  wrapWithDirectory\n} = {}) => {\n  /* c8 ignore next 1 */\n  blockstore = blockstore || new Blockstore();\n  const {\n    root: cid\n  } = await pack({\n    input,\n    blockstore,\n    wrapWithDirectory\n  });\n  const car = new BlockstoreCarReader(1, [cid], blockstore);\n  return {\n    cid,\n    car\n  };\n};\n/**\n * @param {Deal[]} deals\n * @returns {Deal[]}\n */\n\n\nconst decodeDeals = deals => deals.map(deal => {\n  const {\n    dealActivation,\n    dealExpiration,\n    lastChanged\n  } = {\n    dealExpiration: null,\n    dealActivation: null,\n    ...deal\n  };\n  return { ...deal,\n    lastChanged: new Date(lastChanged),\n    ...(dealActivation && {\n      dealActivation: new Date(dealActivation)\n    }),\n    ...(dealExpiration && {\n      dealExpiration: new Date(dealExpiration)\n    })\n  };\n});\n/**\n * @param {Pin} pin\n * @returns {Pin}\n */\n\n\nconst decodePin = pin => ({ ...pin,\n  created: new Date(pin.created)\n});\n/**\n * Convert the passed blob to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is created only when needed.\n *\n * @param {string} path\n * @param {Blob} blob\n */\n\n\nfunction toImportCandidate(path, blob) {\n  /** @type {ReadableStream} */\n  let stream;\n  return {\n    path,\n\n    get content() {\n      stream = stream || blob.stream();\n      return stream;\n    }\n\n  };\n}\n\nexport { NFTStorage, File, Blob, FormData, toGatewayURL, Token };","map":{"version":3,"names":["transform","pRetry","AbortError","TreewalkCarSplitter","pack","CID","throttledQueue","Token","fetch","File","Blob","FormData","Blockstore","toGatewayURL","BlockstoreCarReader","MAX_STORE_RETRIES","MAX_CONCURRENT_UPLOADS","MAX_CHUNK_SIZE","RATE_LIMIT_REQUESTS","RATE_LIMIT_PERIOD","createRateLimiter","throttle","globalRateLimiter","NFTStorage","constructor","token","endpoint","URL","rateLimiter","auth","Error","Authorization","storeBlob","service","blob","blockstore","cidString","cid","car","encodeBlob","storeCar","toString","close","onStoredChunk","maxRetries","decoders","url","headers","targetSize","splitter","fromBlob","upload","carParts","part","push","carFile","type","response","method","body","status","result","json","ok","error","message","value","retries","size","root","cars","storeDirectory","files","encodeDirectory","store","metadata","encodeNFT","deals","decodeDeals","pin","decodePin","created","Date","check","delete","input","validateERC1155","encode","packCar","toImportCandidate","wrapWithDirectory","file","name","options","description","image","decimals","TypeError","startsWith","console","warn","map","deal","dealActivation","dealExpiration","lastChanged","path","stream","content"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/nft.storage/src/lib.js"],"sourcesContent":["/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\n\nimport { transform } from 'streaming-iterables'\nimport pRetry, { AbortError } from 'p-retry'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport { pack } from 'ipfs-car/pack'\nimport { CID } from 'multiformats/cid'\nimport throttledQueue from 'throttled-queue'\nimport * as Token from './token.js'\nimport { fetch, File, Blob, FormData, Blockstore } from './platform.js'\nimport { toGatewayURL } from './gateway.js'\nimport { BlockstoreCarReader } from './bs-car-reader.js'\n\nconst MAX_STORE_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\nconst RATE_LIMIT_REQUESTS = 30\nconst RATE_LIMIT_PERIOD = 10 * 1000\n\n/**\n * @typedef {import('./lib/interface.js').Service} Service\n * @typedef {import('./lib/interface.js').CIDString} CIDString\n * @typedef {import('./lib/interface.js').Deal} Deal\n * @typedef {import('./lib/interface.js').Pin} Pin\n * @typedef {import('./lib/interface.js').CarReader} CarReader\n * @typedef {import('ipfs-car/blockstore').Blockstore} BlockstoreI\n * @typedef {import('./lib/interface.js').RateLimiter} RateLimiter\n */\n\n/**\n * @returns {RateLimiter}\n */\nexport function createRateLimiter() {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD)\n  return () => throttle(() => {})\n}\n\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the NFTStorage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\nconst globalRateLimiter = createRateLimiter()\n\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @typedef {import('./lib/interface.js').Token<T>} TokenType\n */\n\n/**\n * @implements Service\n */\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?: URL, rateLimiter?: RateLimiter}} options\n   */\n  constructor({\n    token,\n    endpoint = new URL('https://api.nft.storage'),\n    rateLimiter,\n  }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint\n    /**\n     * @readonly\n     */\n    this.rateLimiter = rateLimiter || createRateLimiter()\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   */\n  static auth(token) {\n    if (!token) throw new Error('missing token')\n    return { Authorization: `Bearer ${token}`, 'X-Client': 'nft.storage/js' }\n  }\n\n  /**\n   * Stores a single file and returns its CID.\n   *\n   * @param {Service} service\n   * @param {Blob} blob\n   * @returns {Promise<CIDString>}\n   */\n  static async storeBlob(service, blob) {\n    const blockstore = new Blockstore()\n    let cidString\n\n    try {\n      const { cid, car } = await NFTStorage.encodeBlob(blob, { blockstore })\n      await NFTStorage.storeCar(service, car)\n      cidString = cid.toString()\n    } finally {\n      await blockstore.close()\n    }\n\n    return cidString\n  }\n\n  /**\n   * Stores a CAR file and returns its root CID.\n   *\n   * @param {Service} service\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async storeCar(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    car,\n    { onStoredChunk, maxRetries, decoders } = {}\n  ) {\n    const url = new URL('upload/', endpoint)\n    const headers = NFTStorage.auth(token)\n    const targetSize = MAX_CHUNK_SIZE\n    const splitter =\n      car instanceof Blob\n        ? await TreewalkCarSplitter.fromBlob(car, targetSize, { decoders })\n        : new TreewalkCarSplitter(car, targetSize, { decoders })\n\n    const upload = transform(\n      MAX_CONCURRENT_UPLOADS,\n      async function (/** @type {AsyncIterable<Uint8Array>} */ car) {\n        const carParts = []\n        for await (const part of car) {\n          carParts.push(part)\n        }\n        const carFile = new Blob(carParts, { type: 'application/car' })\n        const cid = await pRetry(\n          async () => {\n            await rateLimiter()\n            const response = await fetch(url.toString(), {\n              method: 'POST',\n              headers,\n              body: carFile,\n            })\n            /* c8 ignore next 3 */\n            if (response.status === 429) {\n              throw new Error('rate limited')\n            }\n            const result = await response.json()\n            if (!result.ok) {\n              // do not retry if unauthorized - will not succeed\n              if (response.status === 401) {\n                throw new AbortError(result.error.message)\n              }\n              throw new Error(result.error.message)\n            }\n            return result.value.cid\n          },\n          {\n            retries: maxRetries == null ? MAX_STORE_RETRIES : maxRetries,\n          }\n        )\n        onStoredChunk && onStoredChunk(carFile.size)\n        return cid\n      }\n    )\n\n    let root\n    for await (const cid of upload(splitter.cars())) {\n      root = cid\n    }\n\n    return /** @type {CIDString} */ (root)\n  }\n\n  /**\n   * Stores a directory of files and returns a CID. Provided files **MUST**\n   * be within the same directory, otherwise error is raised e.g. `foo/bar.png`,\n   * `foo/bla/baz.json` is ok but `foo/bar.png`, `bla/baz.json` is not.\n   *\n   * @param {Service} service\n   * @param {Iterable<File>} files\n   * @returns {Promise<CIDString>}\n   */\n  static async storeDirectory(service, files) {\n    const blockstore = new Blockstore()\n    let cidString\n\n    try {\n      const { cid, car } = await NFTStorage.encodeDirectory(files, {\n        blockstore,\n      })\n      await NFTStorage.storeCar(service, car)\n      cidString = cid.toString()\n    } finally {\n      await blockstore.close()\n    }\n\n    return cidString\n  }\n\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155. The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {Service} service\n   * @param {T} metadata\n   * @returns {Promise<TokenType<T>>}\n   */\n  static async store(service, metadata) {\n    const { token, car } = await NFTStorage.encodeNFT(metadata)\n    await NFTStorage.storeCar(service, car)\n    return token\n  }\n\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @returns {Promise<import('./lib/interface.js').StatusResult>}\n   */\n  static async status(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    cid\n  ) {\n    const url = new URL(`${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token),\n    })\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created),\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Check if a CID of an NFT is being stored by NFT.Storage.\n   *\n   * @param {import('./lib/interface.js').PublicService} service\n   * @param {string} cid\n   * @returns {Promise<import('./lib/interface.js').CheckResult>}\n   */\n  static async check({ endpoint, rateLimiter = globalRateLimiter }, cid) {\n    const url = new URL(`check/${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString())\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin,\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Removes stored content by its CID from this account. Please note that\n   * even if content is removed from the service other nodes that have\n   * replicated it might still continue providing it.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @returns {Promise<void>}\n   */\n  static async delete(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    cid\n  ) {\n    const url = new URL(`${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token),\n    })\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n    if (!result.ok) {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Encodes the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155 to a\n   * CAR file. The `token.image` must be either a `File` or a `Blob` instance,\n   * which will be stored and the corresponding content address URL will be\n   * saved in the metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const { token, car } = await NFTStorage.encodeNFT({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', token.url)\n   * console.log('metadata.json contents:\\n', token.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', token.embed())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} input\n   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: CarReader }>}\n   */\n  static async encodeNFT(input) {\n    validateERC1155(input)\n    return Token.Token.encode(input)\n  }\n\n  /**\n   * Encodes a single file to a CAR file and also returns its root CID.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const { cid, car } = await NFTStorage.encodeBlob(content)\n   *\n   * // Root CID of the file\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n  static async encodeBlob(blob, { blockstore } = {}) {\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content')\n    }\n    return packCar([toImportCandidate('blob', blob)], {\n      blockstore,\n      wrapWithDirectory: false,\n    })\n  }\n\n  /**\n   * Encodes a directory of files to a CAR file and also returns the root CID.\n   * Provided files **MUST** be within the same directory, otherwise error is\n   * raised e.g. `foo/bar.png`, `foo/bla/baz.json` is ok but `foo/bar.png`,\n   * `bla/baz.json` is not.\n   *\n   * @example\n   * ```js\n   * const { cid, car } = await NFTStorage.encodeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   *\n   * // Root CID of the directory\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Iterable<File>} files\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n  static async encodeDirectory(files, { blockstore } = {}) {\n    const input = []\n    let size = 0\n    for (const file of files) {\n      input.push(toImportCandidate(file.name, file))\n      size += file.size\n    }\n\n    if (size === 0) {\n      throw new Error(\n        'Total size of files should exceed 0, make sure to provide some content'\n      )\n    }\n\n    return packCar(input, {\n      blockstore,\n      wrapWithDirectory: true,\n    })\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   */\n  storeBlob(blob) {\n    return NFTStorage.storeBlob(this, blob)\n  }\n\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   */\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options)\n  }\n\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {Iterable<File>} files\n   */\n  storeDirectory(files) {\n    return NFTStorage.storeDirectory(this, files)\n  }\n\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  status(cid) {\n    return NFTStorage.status(this, cid)\n  }\n\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  delete(cid) {\n    return NFTStorage.delete(this, cid)\n  }\n\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   */\n  check(cid) {\n    return NFTStorage.check(this, cid)\n  }\n\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} token\n   */\n  store(token) {\n    return NFTStorage.store(this, token)\n  }\n}\n\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @param {T} metadata\n */\nconst validateERC1155 = ({ name, description, image, decimals }) => {\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError(\n      'string property `name` identifying the asset is required'\n    )\n  }\n  if (typeof description !== 'string') {\n    throw new TypeError(\n      'string property `description` describing asset is required'\n    )\n  }\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object')\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`)\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value')\n  }\n}\n\n/**\n * @param {Array<{ path: string, content: import('./platform.js').ReadableStream }>} input\n * @param {object} [options]\n * @param {BlockstoreI} [options.blockstore]\n * @param {boolean} [options.wrapWithDirectory]\n */\nconst packCar = async (input, { blockstore, wrapWithDirectory } = {}) => {\n  /* c8 ignore next 1 */\n  blockstore = blockstore || new Blockstore()\n  const { root: cid } = await pack({ input, blockstore, wrapWithDirectory })\n  const car = new BlockstoreCarReader(1, [cid], blockstore)\n  return { cid, car }\n}\n\n/**\n * @param {Deal[]} deals\n * @returns {Deal[]}\n */\nconst decodeDeals = (deals) =>\n  deals.map((deal) => {\n    const { dealActivation, dealExpiration, lastChanged } = {\n      dealExpiration: null,\n      dealActivation: null,\n      ...deal,\n    }\n\n    return {\n      ...deal,\n      lastChanged: new Date(lastChanged),\n      ...(dealActivation && { dealActivation: new Date(dealActivation) }),\n      ...(dealExpiration && { dealExpiration: new Date(dealExpiration) }),\n    }\n  })\n\n/**\n * @param {Pin} pin\n * @returns {Pin}\n */\nconst decodePin = (pin) => ({ ...pin, created: new Date(pin.created) })\n\n/**\n * Convert the passed blob to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is created only when needed.\n *\n * @param {string} path\n * @param {Blob} blob\n */\nfunction toImportCandidate(path, blob) {\n  /** @type {ReadableStream} */\n  let stream\n  return {\n    path,\n    get content() {\n      stream = stream || blob.stream()\n      return stream\n    },\n  }\n}\n\nexport { NFTStorage, File, Blob, FormData, toGatewayURL, Token }\n"],"mappings":"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;AACA;AACA;AACA;AACA;;;EACEM,QAAQ,CAACF,GAAD,EAAMuD,OAAN,EAAe;IACrB,OAAOtE,UAAU,CAACiB,QAAX,CAAoB,IAApB,EAA0BF,GAA1B,EAA+BuD,OAA/B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEtB,cAAc,CAACC,KAAD,EAAQ;IACpB,OAAOjD,UAAU,CAACgD,cAAX,CAA0B,IAA1B,EAAgCC,KAAhC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEZ,MAAM,CAACvB,GAAD,EAAM;IACV,OAAOd,UAAU,CAACqC,MAAX,CAAkB,IAAlB,EAAwBvB,GAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE+C,MAAM,CAAC/C,GAAD,EAAM;IACV,OAAOd,UAAU,CAAC6D,MAAX,CAAkB,IAAlB,EAAwB/C,GAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE8C,KAAK,CAAC9C,GAAD,EAAM;IACT,OAAOd,UAAU,CAAC4D,KAAX,CAAiB,IAAjB,EAAuB9C,GAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEqC,KAAK,CAACjD,KAAD,EAAQ;IACX,OAAOF,UAAU,CAACmD,KAAX,CAAiB,IAAjB,EAAuBjD,KAAvB,CAAP;EACD;;AA3kBc;AA8kBjB;AACA;AACA;AACA;;;AACA,MAAM6D,eAAe,GAAG,CAAC;EAAEM,IAAF;EAAQE,WAAR;EAAqBC,KAArB;EAA4BC;AAA5B,CAAD,KAA4C;EAClE;EACA,IAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIK,SAAJ,CACJ,0DADI,CAAN;EAGD;;EACD,IAAI,OAAOH,WAAP,KAAuB,QAA3B,EAAqC;IACnC,MAAM,IAAIG,SAAJ,CACJ,4DADI,CAAN;EAGD;;EACD,IAAI,EAAEF,KAAK,YAAYrF,IAAnB,CAAJ,EAA8B;IAC5B,MAAM,IAAIuF,SAAJ,CAAc,gDAAd,CAAN;EACD,CAFD,MAEO,IAAI,CAACF,KAAK,CAACvC,IAAN,CAAW0C,UAAX,CAAsB,QAAtB,CAAL,EAAsC;IAC3CC,OAAO,CAACC,IAAR,CAAc;AAClB;AACA;AACA;AACA,yFAJI;EAKD;;EAED,IAAI,OAAOJ,QAAP,KAAoB,WAApB,IAAmC,OAAOA,QAAP,KAAoB,QAA3D,EAAqE;IACnE,MAAM,IAAIC,SAAJ,CAAc,8CAAd,CAAN;EACD;AACF,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMT,OAAO,GAAG,OAAOH,KAAP,EAAc;EAAElD,UAAF;EAAcuD;AAAd,IAAoC,EAAlD,KAAyD;EACvE;EACAvD,UAAU,GAAGA,UAAU,IAAI,IAAIvB,UAAJ,EAA3B;EACA,MAAM;IAAEyD,IAAI,EAAEhC;EAAR,IAAgB,MAAMjC,IAAI,CAAC;IAAEiF,KAAF;IAASlD,UAAT;IAAqBuD;EAArB,CAAD,CAAhC;EACA,MAAMpD,GAAG,GAAG,IAAIxB,mBAAJ,CAAwB,CAAxB,EAA2B,CAACuB,GAAD,CAA3B,EAAkCF,UAAlC,CAAZ;EACA,OAAO;IAAEE,GAAF;IAAOC;EAAP,CAAP;AACD,CAND;AAQA;AACA;AACA;AACA;;;AACA,MAAMwC,WAAW,GAAID,KAAD,IAClBA,KAAK,CAACwB,GAAN,CAAWC,IAAD,IAAU;EAClB,MAAM;IAAEC,cAAF;IAAkBC,cAAlB;IAAkCC;EAAlC,IAAkD;IACtDD,cAAc,EAAE,IADsC;IAEtDD,cAAc,EAAE,IAFsC;IAGtD,GAAGD;EAHmD,CAAxD;EAMA,OAAO,EACL,GAAGA,IADE;IAELG,WAAW,EAAE,IAAIvB,IAAJ,CAASuB,WAAT,CAFR;IAGL,IAAIF,cAAc,IAAI;MAAEA,cAAc,EAAE,IAAIrB,IAAJ,CAASqB,cAAT;IAAlB,CAAtB,CAHK;IAIL,IAAIC,cAAc,IAAI;MAAEA,cAAc,EAAE,IAAItB,IAAJ,CAASsB,cAAT;IAAlB,CAAtB;EAJK,CAAP;AAMD,CAbD,CADF;AAgBA;AACA;AACA;AACA;;;AACA,MAAMxB,SAAS,GAAID,GAAD,KAAU,EAAE,GAAGA,GAAL;EAAUE,OAAO,EAAE,IAAIC,IAAJ,CAASH,GAAG,CAACE,OAAb;AAAnB,CAAV,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,iBAAT,CAA2BiB,IAA3B,EAAiCxE,IAAjC,EAAuC;EACrC;EACA,IAAIyE,MAAJ;EACA,OAAO;IACLD,IADK;;IAEL,IAAIE,OAAJ,GAAc;MACZD,MAAM,GAAGA,MAAM,IAAIzE,IAAI,CAACyE,MAAL,EAAnB;MACA,OAAOA,MAAP;IACD;;EALI,CAAP;AAOD;;AAED,SAASpF,UAAT,EAAqBd,IAArB,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CE,YAA3C,EAAyDN,KAAzD"},"metadata":{},"sourceType":"module"}