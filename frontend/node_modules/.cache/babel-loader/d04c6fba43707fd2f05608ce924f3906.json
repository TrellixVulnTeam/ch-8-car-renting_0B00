{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { bytes as binary, CID } from './index.js';\n\nconst readonly = ({\n  enumerable = true,\n  configurable = false\n} = {}) => ({\n  enumerable,\n  configurable,\n  writable: false\n});\n\nconst links = function* (source, base) {\n  if (source == null) return;\n  if (source instanceof Uint8Array) return;\n\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key];\n\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [...path, index];\n          const cid = CID.asCID(element);\n\n          if (cid) {\n            yield [elementPath.join('/'), cid];\n          } else if (typeof element === 'object') {\n            yield* links(element, elementPath);\n          }\n        }\n      } else {\n        const cid = CID.asCID(value);\n\n        if (cid) {\n          yield [path.join('/'), cid];\n        } else {\n          yield* links(value, path);\n        }\n      }\n    }\n  }\n};\n\nconst tree = function* (source, base) {\n  if (source == null) return;\n\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key];\n    yield path.join('/');\n\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [...path, index];\n          yield elementPath.join('/');\n\n          if (typeof element === 'object' && !CID.asCID(element)) {\n            yield* tree(element, elementPath);\n          }\n        }\n      } else {\n        yield* tree(value, path);\n      }\n    }\n  }\n};\n\nconst get = (source, path) => {\n  let node = source;\n\n  for (const [index, key] of path.entries()) {\n    node = node[key];\n\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`);\n    }\n\n    const cid = CID.asCID(node);\n\n    if (cid) {\n      return {\n        value: cid,\n        remaining: path.slice(index + 1).join('/')\n      };\n    }\n  }\n\n  return {\n    value: node\n  };\n};\n\nclass Block {\n  constructor({\n    cid,\n    bytes,\n    value\n  }) {\n    if (!cid || !bytes || typeof value === 'undefined') throw new Error('Missing required argument');\n    this.cid = cid;\n    this.bytes = bytes;\n    this.value = value;\n    this.asBlock = this;\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    });\n  }\n\n  links() {\n    return links(this.value, []);\n  }\n\n  tree() {\n    return tree(this.value, []);\n  }\n\n  get(path = '/') {\n    return get(this.value, path.split('/').filter(Boolean));\n  }\n\n}\n\nconst encode = async ({\n  value,\n  codec,\n  hasher\n}) => {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"');\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher');\n  const bytes = codec.encode(value);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\n\nconst decode = async ({\n  bytes,\n  codec,\n  hasher\n}) => {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"');\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\n\nconst createUnsafe = ({\n  bytes,\n  cid,\n  value: maybeValue,\n  codec\n}) => {\n  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"');\n  return new Block({\n    cid,\n    bytes,\n    value\n  });\n};\n\nconst create = async ({\n  bytes,\n  cid,\n  hasher,\n  codec\n}) => {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"');\n  if (!hasher) throw new Error('Missing required argument \"hasher\"');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes');\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  });\n};\n\nexport { encode, decode, create, createUnsafe, Block };","map":{"version":3,"names":["bytes","binary","CID","readonly","enumerable","configurable","writable","links","source","base","Uint8Array","key","value","Object","entries","path","Array","isArray","index","element","elementPath","cid","asCID","join","tree","get","node","Error","slice","map","part","JSON","stringify","remaining","Block","constructor","asBlock","defineProperties","split","filter","Boolean","encode","codec","hasher","hash","digest","create","code","decode","createUnsafe","maybeValue","undefined","equals","multihash"],"sources":["/var/www/ch-8-car-renting/frontend/node_modules/multiformats/esm/src/block.js"],"sourcesContent":["import {\n  bytes as binary,\n  CID\n} from './index.js';\nconst readonly = ({enumerable = true, configurable = false} = {}) => ({\n  enumerable,\n  configurable,\n  writable: false\n});\nconst links = function* (source, base) {\n  if (source == null)\n    return;\n  if (source instanceof Uint8Array)\n    return;\n  for (const [key, value] of Object.entries(source)) {\n    const path = [\n      ...base,\n      key\n    ];\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [\n            ...path,\n            index\n          ];\n          const cid = CID.asCID(element);\n          if (cid) {\n            yield [\n              elementPath.join('/'),\n              cid\n            ];\n          } else if (typeof element === 'object') {\n            yield* links(element, elementPath);\n          }\n        }\n      } else {\n        const cid = CID.asCID(value);\n        if (cid) {\n          yield [\n            path.join('/'),\n            cid\n          ];\n        } else {\n          yield* links(value, path);\n        }\n      }\n    }\n  }\n};\nconst tree = function* (source, base) {\n  if (source == null)\n    return;\n  for (const [key, value] of Object.entries(source)) {\n    const path = [\n      ...base,\n      key\n    ];\n    yield path.join('/');\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [\n            ...path,\n            index\n          ];\n          yield elementPath.join('/');\n          if (typeof element === 'object' && !CID.asCID(element)) {\n            yield* tree(element, elementPath);\n          }\n        }\n      } else {\n        yield* tree(value, path);\n      }\n    }\n  }\n};\nconst get = (source, path) => {\n  let node = source;\n  for (const [index, key] of path.entries()) {\n    node = node[key];\n    if (node == null) {\n      throw new Error(`Object has no property at ${ path.slice(0, index + 1).map(part => `[${ JSON.stringify(part) }]`).join('') }`);\n    }\n    const cid = CID.asCID(node);\n    if (cid) {\n      return {\n        value: cid,\n        remaining: path.slice(index + 1).join('/')\n      };\n    }\n  }\n  return { value: node };\n};\nclass Block {\n  constructor({cid, bytes, value}) {\n    if (!cid || !bytes || typeof value === 'undefined')\n      throw new Error('Missing required argument');\n    this.cid = cid;\n    this.bytes = bytes;\n    this.value = value;\n    this.asBlock = this;\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    });\n  }\n  links() {\n    return links(this.value, []);\n  }\n  tree() {\n    return tree(this.value, []);\n  }\n  get(path = '/') {\n    return get(this.value, path.split('/').filter(Boolean));\n  }\n}\nconst encode = async ({value, codec, hasher}) => {\n  if (typeof value === 'undefined')\n    throw new Error('Missing required argument \"value\"');\n  if (!codec || !hasher)\n    throw new Error('Missing required argument: codec or hasher');\n  const bytes = codec.encode(value);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\nconst decode = async ({bytes, codec, hasher}) => {\n  if (!bytes)\n    throw new Error('Missing required argument \"bytes\"');\n  if (!codec || !hasher)\n    throw new Error('Missing required argument: codec or hasher');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\nconst createUnsafe = ({\n  bytes,\n  cid,\n  value: maybeValue,\n  codec\n}) => {\n  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);\n  if (value === undefined)\n    throw new Error('Missing required argument, must either provide \"value\" or \"codec\"');\n  return new Block({\n    cid,\n    bytes,\n    value\n  });\n};\nconst create = async ({bytes, cid, hasher, codec}) => {\n  if (!bytes)\n    throw new Error('Missing required argument \"bytes\"');\n  if (!hasher)\n    throw new Error('Missing required argument \"hasher\"');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes');\n  }\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  });\n};\nexport {\n  encode,\n  decode,\n  create,\n  createUnsafe,\n  Block\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}