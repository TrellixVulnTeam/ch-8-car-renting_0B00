import { updateState } from "../state";
import { Provider, Logger, PersistentStorage, Emitter } from "../services";
import { Transaction } from "./transactions";
import { Action } from "./actions";
import { Options } from "../Options";
import { NetworkConfiguration } from "../network";
import { providers } from "near-api-js";
export interface HardwareWalletSignInParams {
    accountId: string;
    derivationPath: string;
}
export interface SignAndSendTransactionParams {
    signerId: string;
    receiverId: string;
    actions: Array<Action>;
}
export interface SignAndSendTransactionsParams {
    transactions: Array<Transaction>;
}
export interface AccountInfo {
    accountId: string;
}
export declare type WalletEvents = {
    signIn: {
        accounts: Array<AccountInfo>;
    };
    signOut: {
        accounts: Array<AccountInfo>;
    };
    accountsChanged: {
        accounts: Array<AccountInfo>;
    };
};
interface BaseWallet<ExecutionOutcome = providers.FinalExecutionOutcome> {
    id: string;
    name: string;
    description: string | null;
    iconUrl: string;
    type: string;
    init(): Promise<void>;
    isAvailable(): boolean;
    signIn(params?: object): Promise<void>;
    signOut(): Promise<void>;
    isSignedIn(): Promise<boolean>;
    getAccounts(): Promise<Array<AccountInfo>>;
    signAndSendTransaction(params: SignAndSendTransactionParams): Promise<ExecutionOutcome>;
    signAndSendTransactions(params: SignAndSendTransactionsParams): Promise<ExecutionOutcome extends void ? void : Array<ExecutionOutcome>>;
}
export interface BrowserWallet extends BaseWallet<void> {
    type: "browser";
}
export interface InjectedWallet extends BaseWallet {
    type: "injected";
    downloadUrl: string;
}
export interface HardwareWallet extends BaseWallet {
    type: "hardware";
    signIn(params: HardwareWalletSignInParams): Promise<void>;
}
export interface BridgeWallet extends BaseWallet {
    type: "bridge";
}
export declare type Wallet = BrowserWallet | InjectedWallet | HardwareWallet | BridgeWallet;
export declare type WalletType = Wallet["type"];
export interface WalletOptions {
    options: Options;
    network: NetworkConfiguration;
    provider: Provider;
    emitter: Emitter<WalletEvents>;
    logger: Logger;
    storage: PersistentStorage;
    updateState: typeof updateState;
}
export declare type WalletModule<WalletVariation extends Wallet = Wallet> = (options: WalletOptions) => WalletVariation;
export {};
